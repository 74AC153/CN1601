ARRLEN	sim.c	/^#define ARRLEN(ARR) (sizeof(ARR) \/ sizeof(ARR[0])/
BITMASK	instructions.c	/^#define BITMASK(WIDTH, START) \\$/
CIRCBUF_H	circbuf.h	/^#define CIRCBUF_H$/
CP_NVRAM_DELAY_CYCLES	sim_cp_nvram.h	/^#define CP_NVRAM_DELAY_CYCLES 3$/
CP_NVRAM_INSTR_ACK	sim_cp_nvram.h	/^#define CP_NVRAM_INSTR_ACK 3$/
CP_NVRAM_INSTR_GETLEN_HI	sim_cp_nvram.h	/^#define CP_NVRAM_INSTR_GETLEN_HI 5$/
CP_NVRAM_INSTR_GETLEN_LO	sim_cp_nvram.h	/^#define CP_NVRAM_INSTR_GETLEN_LO 4$/
CP_NVRAM_INSTR_NOOP	sim_cp_nvram.h	/^#define CP_NVRAM_INSTR_NOOP 0$/
CP_NVRAM_INSTR_READ	sim_cp_nvram.h	/^#define CP_NVRAM_INSTR_READ 1$/
CP_NVRAM_INSTR_WRITE	sim_cp_nvram.h	/^#define CP_NVRAM_INSTR_WRITE 2$/
CP_NVRAM_REG_ADDR_HI	sim_cp_nvram.h	/^#define CP_NVRAM_REG_ADDR_HI 3$/
CP_NVRAM_REG_ADDR_LO	sim_cp_nvram.h	/^#define CP_NVRAM_REG_ADDR_LO 2$/
CP_NVRAM_REG_CTL	sim_cp_nvram.h	/^#define CP_NVRAM_REG_CTL 0$/
CP_NVRAM_REG_CTL_READ_INT	sim_cp_nvram.h	/^#define CP_NVRAM_REG_CTL_READ_INT 0x1$/
CP_NVRAM_REG_CTL_WRITE_INT	sim_cp_nvram.h	/^#define CP_NVRAM_REG_CTL_WRITE_INT 0x2$/
CP_NVRAM_REG_STATUS	sim_cp_nvram.h	/^#define CP_NVRAM_REG_STATUS 1$/
CP_NVRAM_REG_STATUS_IDLE	sim_cp_nvram.h	/^#define CP_NVRAM_REG_STATUS_IDLE 0$/
CP_NVRAM_REG_STATUS_READ_ERR	sim_cp_nvram.h	/^#define CP_NVRAM_REG_STATUS_READ_ERR 3$/
CP_NVRAM_REG_STATUS_READ_OK	sim_cp_nvram.h	/^#define CP_NVRAM_REG_STATUS_READ_OK 2$/
CP_NVRAM_REG_STATUS_READ_PENDING	sim_cp_nvram.h	/^#define CP_NVRAM_REG_STATUS_READ_PENDING 1$/
CP_NVRAM_REG_STATUS_WRITE_ERR	sim_cp_nvram.h	/^#define CP_NVRAM_REG_STATUS_WRITE_ERR 6$/
CP_NVRAM_REG_STATUS_WRITE_OK	sim_cp_nvram.h	/^#define CP_NVRAM_REG_STATUS_WRITE_OK 5$/
CP_NVRAM_REG_STATUS_WRITE_PENDING	sim_cp_nvram.h	/^#define CP_NVRAM_REG_STATUS_WRITE_PENDING 4$/
CP_NVRAM_REG_VAL	sim_cp_nvram.h	/^#define CP_NVRAM_REG_VAL 4$/
CP_TIMER_INSTR_IACK	sim_cp_timer.h	/^#define CP_TIMER_INSTR_IACK 1$/
CP_TIMER_INSTR_NOOP	sim_cp_timer.h	/^#define CP_TIMER_INSTR_NOOP 0$/
CP_TIMER_REG_CTL	sim_cp_timer.h	/^#define CP_TIMER_REG_CTL 0$/
CP_TIMER_REG_CTL_EN_LEN	sim_cp_timer.h	/^#define CP_TIMER_REG_CTL_EN_LEN 1$/
CP_TIMER_REG_CTL_EN_START	sim_cp_timer.h	/^#define CP_TIMER_REG_CTL_EN_START 0$/
CP_TIMER_REG_CYCLE_HI	sim_cp_timer.h	/^#define CP_TIMER_REG_CYCLE_HI 2$/
CP_TIMER_REG_CYCLE_LO	sim_cp_timer.h	/^#define CP_TIMER_REG_CYCLE_LO 1$/
CP_UART_FIFOS_OFF	sim_cp_uart.h	/^#define CP_UART_FIFOS_OFF 9$/
CP_UART_FIFOS_ON	sim_cp_uart.h	/^#define CP_UART_FIFOS_ON 8$/
CP_UART_INSTR_CLEAR	sim_cp_uart.h	/^#define CP_UART_INSTR_CLEAR 7$/
CP_UART_INSTR_NOOP	sim_cp_uart.h	/^#define CP_UART_INSTR_NOOP 0$/
CP_UART_INSTR_RECV	sim_cp_uart.h	/^#define CP_UART_INSTR_RECV 2$/
CP_UART_INSTR_RESET_RX	sim_cp_uart.h	/^#define CP_UART_INSTR_RESET_RX 6$/
CP_UART_INSTR_RESET_TX	sim_cp_uart.h	/^#define CP_UART_INSTR_RESET_TX 5$/
CP_UART_INSTR_RXUSED	sim_cp_uart.h	/^#define CP_UART_INSTR_RXUSED 4$/
CP_UART_INSTR_SEND	sim_cp_uart.h	/^#define CP_UART_INSTR_SEND 1$/
CP_UART_INSTR_TXUSED	sim_cp_uart.h	/^#define CP_UART_INSTR_TXUSED 3$/
CP_UART_INT_ACK	sim_cp_uart.h	/^#define CP_UART_INT_ACK 10$/
CP_UART_REG_CTL	sim_cp_uart.h	/^#define CP_UART_REG_CTL 0$/
CP_UART_REG_CTL_RX_AVAIL_INT	sim_cp_uart.h	/^#define CP_UART_REG_CTL_RX_AVAIL_INT 2$/
CP_UART_REG_CTL_TX_SPACE_INT	sim_cp_uart.h	/^#define CP_UART_REG_CTL_TX_SPACE_INT 1$/
CP_UART_REG_STATUS	sim_cp_uart.h	/^#define CP_UART_REG_STATUS 1$/
CP_UART_REG_STATUS_RX_AVAIL	sim_cp_uart.h	/^#define CP_UART_REG_STATUS_RX_AVAIL 2$/
CP_UART_REG_STATUS_TX_SPACE	sim_cp_uart.h	/^#define CP_UART_REG_STATUS_TX_SPACE 1$/
CP_UART_REG_VAL	sim_cp_uart.h	/^#define CP_UART_REG_VAL 2$/
DLIST_H	dlist.h	/^#define DLIST_H$/
DLIST_STATIC_INITIALIZER	dlist.h	/^#define DLIST_STATIC_INITIALIZER(LIST) \\$/
FIFO_LEN	sim_cp_uart.h	/^#define FIFO_LEN 16$/
INSTRUCTIONS_H	instructions.h	/^#define INSTRUCTIONS_H$/
INSTR_TABLE_H	instr_table.h	/^#define INSTR_TABLE_H$/
MAX_WORDS	asm.c	/^#define MAX_WORDS 65536$/
MBOX_H	mbox.h	/^#define MBOX_H$/
MEMIF_DELAY	sim_memif.h	/^#define MEMIF_DELAY 1$/
Masm	asm.c	/^int main(int argc, char *argv[])$/
Mcdevclt	cdevclt.c	/^int main(int argc, char *argv[])$/
Mdasm	dasm.c	/^int main(int argc, char *argv[])$/
Mfifostdio	fifostdio.c	/^int main(int argc, char *argv[])$/
Minstructions_test	instructions_test.c	/^int main(int argc, char *argv[])$/
Mptymaster	ptymaster.c	/^int main(int argc, char *argv[])$/
Msim	sim.c	/^int main(int argc, char *argv[])$/
Msim_core_test	sim_core_test.c	/^int main(int argc, char *argv[])$/
NVRAM_ADDR_HI	sim_cp_nvram.c	/^#define NVRAM_ADDR_HI(STATE) ((STATE)->hdr.regs[CP/
NVRAM_ADDR_LO	sim_cp_nvram.c	/^#define NVRAM_ADDR_LO(STATE) ((STATE)->hdr.regs[CP/
NVRAM_CTL	sim_cp_nvram.c	/^#define NVRAM_CTL(STATE) ((STATE)->hdr.regs[CP_NVR/
NVRAM_STATUS	sim_cp_nvram.c	/^#define NVRAM_STATUS(STATE) ((STATE)->hdr.regs[CP_/
NVRAM_VAL	sim_cp_nvram.c	/^#define NVRAM_VAL(STATE) ((STATE)->hdr.regs[CP_NVR/
OPCODE_NUMBITS	instr_table.h	/^#define OPCODE_NUMBITS 5 $/
OPCODE_STARTBIT	instr_table.h	/^#define OPCODE_STARTBIT 11$/
PHYSMEM_NUMWORDS	sim.c	/^#define PHYSMEM_NUMWORDS 65535$/
POLL_TIMEOUT_MS	sim_cp_uart.c	/^#define POLL_TIMEOUT_MS 100$/
SET_BIT	sim_core.c	/^#define SET_BIT(FIELD, BIT, VAL) \\$/
SGNEXTEND	asm.c	/^#define SGNEXTEND(VAL, TYPE, BITNUM) \\$/
SIM_CORE_H	sim_core.h	/^#define SIM_CORE_H$/
SIM_CORE_NUM_CPREGS	sim_core.h	/^#define SIM_CORE_NUM_CPREGS 32$/
SIM_CORE_NUM_CTLREGS	sim_core.h	/^#define SIM_CORE_NUM_CTLREGS 32$/
SIM_CORE_NUM_EXTINT	sim_core.h	/^#define SIM_CORE_NUM_EXTINT 8$/
SIM_CORE_NUM_GPREGS	sim_core.h	/^#define SIM_CORE_NUM_GPREGS 8$/
SIM_CP_IF	sim_cp_if.h	/^#define SIM_CP_IF$/
SIM_CP_NVRAM_H	sim_cp_nvram.h	/^#define SIM_CP_NVRAM_H$/
SIM_CP_TIMER_H	sim_cp_timer.h	/^#define SIM_CP_TIMER_H$/
SIM_CP_UART_H	sim_cp_uart.h	/^#define SIM_CP_UART_H$/
SIM_MEMIF_H	sim_memif.h	/^#define SIM_MEMIF_H$/
SIM_PHYSMEM_ADDR_BITS	sim_physmem.h	/^#define SIM_PHYSMEM_ADDR_BITS 16$/
SIM_PHYSMEM_DATA_BITS	sim_physmem.h	/^#define SIM_PHYSMEM_DATA_BITS 16$/
SIM_PHYSMEM_H	sim_physmem.h	/^#define SIM_PHYSMEM_H$/
SIM_PHYSMEM_LEN	sim_physmem.h	/^#define SIM_PHYSMEM_LEN (0x1 << (SIM_PHYSMEM_ADDR_/
SIM_UTILS_H	sim_utils.h	/^#define SIM_UTILS_H$/
STATUS_GET_GIE	sim_core.h	/^#define STATUS_GET_GIE(STAT) (((STAT) >> 14) & 0x1/
STATUS_GET_LL	sim_core.h	/^#define STATUS_GET_LL(STAT) (((STAT) >> 12) & 0x1)/
STATUS_GET_RUMODE	sim_core.h	/^#define STATUS_GET_RUMODE(STAT) (((STAT) >> 13) & /
STATUS_GET_SWIARG	sim_core.h	/^#define STATUS_GET_SWIARG(STAT) ((STAT) & 0x7FF)$/
STATUS_GET_UM	sim_core.h	/^#define STATUS_GET_UM(STAT) (((STAT) >> 15) & 0x1)/
STATUS_GET_UMSAVE	sim_core.h	/^#define STATUS_GET_UMSAVE(STAT) (((STAT) >> 11) & /
STATUS_SET_GIE	sim_core.h	/^#define STATUS_SET_GIE(STAT, VAL) \\$/
STATUS_SET_LL	sim_core.h	/^#define STATUS_SET_LL(STAT, VAL) \\$/
STATUS_SET_RUMODE	sim_core.h	/^#define STATUS_SET_RUMODE(STAT, VAL) \\$/
STATUS_SET_SWIARG	sim_core.h	/^#define STATUS_SET_SWIARG(STAT, VAL) \\$/
STATUS_SET_UM	sim_core.h	/^#define STATUS_SET_UM(STAT, VAL) \\$/
STATUS_SET_UMSAVE	sim_core.h	/^#define STATUS_SET_UMSAVE(STAT, VAL) \\$/
SUBCODE_NUMBITS	instr_table.h	/^#define SUBCODE_NUMBITS 2$/
SUBCODE_STARTBIT	instr_table.h	/^#define SUBCODE_STARTBIT 0$/
SYN_TESTMISMATCH_FAIL	asm.c	/^#define SYN_TESTMISMATCH_FAIL(EXPECT) \\$/
TEST_BIT	sim_core.c	/^#define TEST_BIT(FIELD, BIT) \\$/
TIMER_CYCLES_HI	sim_cp_timer.c	/^#define TIMER_CYCLES_HI(STATE) \\$/
TIMER_CYCLES_LO	sim_cp_timer.c	/^#define TIMER_CYCLES_LO(STATE) \\$/
TIMER_GET_ENABLED	sim_cp_timer.c	/^#define TIMER_GET_ENABLED(STATE) \\$/
TIMER_SET_ENABLED	sim_cp_timer.c	/^#define TIMER_SET_ENABLED(STATE, EN_VAL) \\$/
TRACE	sim_core.c	/^#define TRACE(STATE, LEVEL, ...) do{if((STATE)->tr/
TRACEBLOCK	sim_core.c	/^#define TRACEBLOCK(STATE, LEVEL, BLOCK) do{if((STA/
UTILS_H	utils.h	/^#define UTILS_H$/
VERBOSE	instructions_test.c	/^\/\/#define VERBOSE$/
alu_exec	sim_core.c	/^uint16_t alu_exec(alu_op_t op, uint16_t arg0, uint/
alu_op_t	sim_core.c	/^} alu_op_t;$/
assemble_instruction	instructions.c	/^int assemble_instruction($/
bitmask16	utils.h	/^uint16_t bitmask16(int start, int num)$/
charmsg_new	sim_cp_uart.c	/^charmsg_t *charmsg_new(char c)$/
charmsg_t	sim_cp_uart.c	/^} charmsg_t;$/
check_pending_interrupt	sim_core.c	/^int check_pending_interrupt($/
circbuf_read	circbuf.c	/^size_t circbuf_read(void *out, size_t outlen, void/
circbuf_reset	circbuf.c	/^void circbuf_reset(circbufinfo_t *info)$/
circbuf_space	circbuf.c	/^size_t circbuf_space(circbufinfo_t *info)$/
circbuf_used	circbuf.c	/^size_t circbuf_used(circbufinfo_t *info)$/
circbuf_write	circbuf.c	/^size_t circbuf_write(void *in, size_t inlen, void /
circbufinfo_init	circbuf.c	/^circbufinfo_t *circbufinfo_init(void *p, size_t le/
circbufinfo_t	circbuf.h	/^} circbufinfo_t;$/
cli_args_t	sim.c	/^} cli_args_t;$/
cli_opts_t	sim_core_test.c	/^} cli_opts_t;$/
coproc_op_t	sim_core.h	/^} coproc_op_t;$/
cycle	sim.c	/^int cycle(void)$/
decode_instruction	instructions.c	/^int decode_instruction($/
demux_lines	sim_utils.c	/^void demux_lines(uint32_t inval, uint8_t **lines, /
disassemble	dasm.c	/^int disassemble(uint16_t instr, char *outstr, size/
dlist	dlist.h	/^struct dlist {$/
dlist_first	dlist.h	/^dlnode_t *dlist_first(dlist_t *l)$/
dlist_init	dlist.h	/^void dlist_init(dlist_t *l)$/
dlist_insertfirst	dlist.h	/^void dlist_insertfirst(dlist_t *l, dlnode_t *n)$/
dlist_insertlast	dlist.h	/^void dlist_insertlast(dlist_t *l, dlnode_t *n)$/
dlist_is_empty	dlist.h	/^bool dlist_is_empty(dlist_t *l)$/
dlist_last	dlist.h	/^dlnode_t *dlist_last(dlist_t *l)$/
dlist_t	dlist.h	/^typedef struct dlist dlist_t;$/
dlnode	dlist.h	/^struct dlnode {$/
dlnode_init	dlist.h	/^dlnode_t *dlnode_init(dlnode_t *n)$/
dlnode_insertnext	dlist.h	/^void dlnode_insertnext(dlnode_t *n, dlnode_t *next/
dlnode_insertprev	dlist.h	/^void dlnode_insertprev(dlnode_t *n, dlnode_t *prev/
dlnode_is_terminal	dlist.h	/^bool dlnode_is_terminal(dlnode_t *n)$/
dlnode_next	dlist.h	/^dlnode_t *dlnode_next(dlnode_t *n)$/
dlnode_owner	dlist.h	/^dlist_t *dlnode_owner(dlnode_t *n)$/
dlnode_prev	dlist.h	/^dlnode_t *dlnode_prev(dlnode_t *n)$/
dlnode_remove	dlist.h	/^dlnode_t *dlnode_remove(dlnode_t *n)$/
dlnode_t	dlist.h	/^typedef struct dlnode dlnode_t;$/
do_interp_continue	sim.c	/^int do_interp_continue(void)$/
do_interp_goto	sim.c	/^int do_interp_goto(int argc, char *argv[])$/
do_interp_load	sim.c	/^int do_interp_load(int argc, char *argv[])$/
do_interp_read	sim.c	/^int do_interp_read(int argc, char *argv[])$/
do_interp_reset	sim.c	/^int do_interp_reset(int argc, char *argv[])$/
do_interp_show	sim.c	/^int do_interp_show(int argc, char *argv[])$/
do_interp_step	sim.c	/^int do_interp_step(int argc, char *argv[])$/
do_interp_trace	sim.c	/^int do_interp_trace(int argc, char *argv[])$/
field_getbits16	utils.h	/^uint16_t field_getbits16(uint16_t field, int start/
field_setbits16	utils.h	/^uint16_t field_setbits16(uint16_t field, int start/
find_offset	asm.c	/^int find_offset(char *find, labeldec_t *labels)$/
find_reloff	asm.c	/^int find_reloff(size_t cur_off, char *find, labeld/
generate_labels	asm.c	/^void generate_labels($/
generate_opcodes	asm.c	/^int generate_opcodes($/
gpreg_read	sim_core.c	/^uint16_t gpreg_read(sim_core_state_t *state, unsig/
gpreg_write	sim_core.c	/^void gpreg_write(sim_core_state_t *state, unsigned/
hdr	sim_cp_if.h	/^typedef int(*state_fn_t)(sim_cp_state_hdr_t *hdr);/
instr_fmt_t	instructions.c	/^} instr_fmt_t;$/
instr_spec_t	instr_table.h	/^} instr_spec_t;$/
interpret	sim.c	/^int interpret(char *cmdstr)$/
issymchar	asm.c	/^int issymchar(int c)$/
labeldec_t	asm.c	/^typedef struct labeldec labeldec_t;$/
linedec_t	asm.c	/^typedef struct linedec linedec_t;$/
load_file	sim_core_test.c	/^int load_file(char *path, char **data, size_t *dat/
mbox_init	mbox.c	/^mbox_t *mbox_init(void *p)$/
mbox_len	mbox.c	/^size_t mbox_len(mbox_t *box)$/
mbox_msg_get	mbox.c	/^msg_t *mbox_msg_get(mbox_t *box)$/
mbox_msg_get_wait	mbox.c	/^msg_t *mbox_msg_get_wait(mbox_t *box, unsigned lon/
mbox_msg_post	mbox.c	/^void mbox_msg_post(mbox_t *box, msg_t *msg)$/
mbox_t	mbox.h	/^} mbox_t;$/
msg_init	mbox.c	/^msg_t *msg_init(void *p)$/
msg_t	mbox.h	/^} msg_t;$/
mux_lines	sim_utils.c	/^void mux_lines(uint8_t **lines, int nlines, uint32/
nextsym	asm.c	/^int nextsym(char *line, char **sym, int (*valid)(i/
nmemonic_syntax	instructions.c	/^int nmemonic_syntax($/
nvram_state_data	sim_cp_nvram.c	/^int nvram_state_data(sim_cp_state_hdr_t *hdr)$/
nvram_state_deinit	sim_cp_nvram.c	/^int nvram_state_deinit(sim_cp_state_hdr_t *hdr)$/
nvram_state_exec	sim_cp_nvram.c	/^int nvram_state_exec(sim_cp_state_hdr_t *hdr)$/
nvram_state_init	sim_cp_nvram.c	/^int nvram_state_init(sim_cp_state_hdr_t *hdr)$/
nvram_state_print	sim_cp_nvram.c	/^int nvram_state_print(sim_cp_state_hdr_t *hdr)$/
nvram_state_reset	sim_cp_nvram.c	/^int nvram_state_reset(sim_cp_state_hdr_t *hdr)$/
parse_cli	asm.c	/^int parse_cli(int argc, char *argv[], struct cli_o/
parse_inputdesc	sim_core_test.c	/^int parse_inputdesc(char *desc, size_t desclen, si/
parse_outputdesc	sim_core_test.c	/^int parse_outputdesc(char *desc, size_t desclen, s/
parse_statedesc	sim_core_test.c	/^int parse_statedesc(char *desc, size_t desclen, si/
print_input	sim.c	/^void print_input(sim_core_input_t *input)$/
print_mem_state	sim.c	/^void print_mem_state(sim_memif_state_t *state)$/
print_output	sim.c	/^void print_output(sim_core_output_t *output)$/
print_state	sim.c	/^void print_state(sim_core_state_t *state)$/
read_eq_semicolon_pair	sim_core_test.c	/^int read_eq_semicolon_pair($/
read_input_desc	sim_core_test.c	/^int read_input_desc(char *path, sim_core_input_t */
read_output_desc	sim_core_test.c	/^int read_output_desc(char *path, sim_core_output_t/
read_state_desc	sim_core_test.c	/^int read_state_desc(char *path, sim_core_state_t */
readline	asm.c	/^int readline(int fd, char *buf, unsigned int bufma/
reset	sim.c	/^int reset(void)$/
reset_core	sim.c	/^void reset_core(void)$/
reset_mem	sim.c	/^void reset_mem(void)$/
resolve_nmemonic	instructions.c	/^int resolve_nmemonic($/
restore	fifostdio.c	/^void restore(int s)$/
run_case	instructions_test.c	/^void run_case(int i)$/
rx_thr_fun	sim_cp_uart.c	/^void *rx_thr_fun(void *p)$/
sim_core_cp_input_t	sim_core.h	/^} sim_core_cp_input_t;$/
sim_core_cp_output_t	sim_core.h	/^} sim_core_cp_output_t;$/
sim_core_exec	sim_core.c	/^int sim_core_exec($/
sim_core_input_init	sim_core.c	/^sim_core_input_t *sim_core_input_init($/
sim_core_input_t	sim_core.h	/^} sim_core_input_t;$/
sim_core_mem_input_t	sim_core.h	/^} sim_core_mem_input_t;$/
sim_core_mem_output_t	sim_core.h	/^} sim_core_mem_output_t;$/
sim_core_output_init	sim_core.c	/^sim_core_output_t *sim_core_output_init($/
sim_core_output_t	sim_core.h	/^} sim_core_output_t;$/
sim_core_state_init	sim_core.c	/^sim_core_state_t *sim_core_state_init($/
sim_core_state_t	sim_core.h	/^} sim_core_state_t;$/
sim_core_update	sim_core.c	/^int sim_core_update($/
sim_cp_hdr_deinit	sim_cp_if.c	/^void sim_cp_hdr_deinit($/
sim_cp_hdr_init	sim_cp_if.c	/^sim_cp_hdr_init($/
sim_cp_hdr_reset	sim_cp_if.c	/^void sim_cp_hdr_reset($/
sim_cp_info_t	sim_cp_if.h	/^} sim_cp_info_t;$/
sim_cp_nvram_state_t	sim_cp_nvram.h	/^} sim_cp_nvram_state_t;$/
sim_cp_read	sim_cp_if.c	/^void sim_cp_read($/
sim_cp_state_hdr_t	sim_cp_if.h	/^} sim_cp_state_hdr_t;$/
sim_cp_timer_state_t	sim_cp_timer.h	/^} sim_cp_timer_state_t;$/
sim_cp_uart_state_t	sim_cp_uart.h	/^} sim_cp_uart_state_t;$/
sim_cp_write	sim_cp_if.c	/^void sim_cp_write($/
sim_memif_access	sim_memif.c	/^void sim_memif_access($/
sim_memif_init	sim_memif.c	/^void sim_memif_init($/
sim_memif_state_t	sim_memif.h	/^} sim_memif_state_t;$/
sim_memif_tick	sim_memif.c	/^void sim_memif_tick(sim_memif_state_t *mem_state)$/
sim_physmem_io_setup_data	sim_physmem.c	/^void sim_physmem_io_setup_data(sim_physmem_io_t *p/
sim_physmem_io_t	sim_physmem.h	/^} sim_physmem_io_t;$/
sim_physmem_tick	sim_physmem.c	/^int sim_physmem_tick(sim_physmem_io_t *io)$/
split	sim.c	/^int split(char *str, char *seps, bool zerolen,$/
splitline	asm.c	/^int splitline(char *line, linedec_t *split)$/
status_rfi	sim_core.c	/^void status_rfi(uint16_t *stat)$/
status_trap	sim_core.c	/^void status_trap(uint16_t *stat)$/
strchrs	sim.c	/^char *strchrs(char *str, char *chars, bool endmatc/
testcase_t	instructions_test.c	/^} testcase_t;$/
timer_state_data	sim_cp_timer.c	/^int timer_state_data(sim_cp_state_hdr_t *hdr)$/
timer_state_exec	sim_cp_timer.c	/^int timer_state_exec(sim_cp_state_hdr_t *hdr)$/
timer_state_print	sim_cp_timer.c	/^int timer_state_print(sim_cp_state_hdr_t *hdr)$/
tokenize	asm.c	/^int tokenize(int infd, linedec_t **lines_head, lin/
tx_thr_fun	sim_cp_uart.c	/^void *tx_thr_fun(void *p)$/
uart_state_data	sim_cp_uart.c	/^int uart_state_data(sim_cp_state_hdr_t *hdr)$/
uart_state_deinit	sim_cp_uart.c	/^int uart_state_deinit(sim_cp_state_hdr_t *hdr)$/
uart_state_exec	sim_cp_uart.c	/^int uart_state_exec(sim_cp_state_hdr_t *hdr)$/
uart_state_init	sim_cp_uart.c	/^int uart_state_init(sim_cp_state_hdr_t *hdr)$/
uart_state_print	sim_cp_uart.c	/^int uart_state_print(sim_cp_state_hdr_t *hdr)$/
uart_state_reset	sim_cp_uart.c	/^int uart_state_reset(sim_cp_state_hdr_t *hdr)$/
unset_run_sim	sim.c	/^void unset_run_sim(int arg)$/
update_propagate_signals	sim_core.c	/^static void update_propagate_signals($/
usage	asm.c	/^void usage(char *progname)$/
